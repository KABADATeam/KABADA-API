// <auto-generated />
using System;
using KabadaAPI.DataSource;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KabadaAPI.DataSource.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20210611130221_AddPlanIsResourcesCompleted")]
    partial class AddPlanIsResourcesCompleted
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KabadaAPI.DataSource.Models.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IndustryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.BusinessPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Completed")
                        .HasColumnType("int");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid?>("Img")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsResourcesCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSwotCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Public")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("BusinessPlans");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b682d7d-37b7-4f7f-aede-a10614fb7393"),
                            ShortCode = "AT",
                            Title = "Austria"
                        },
                        new
                        {
                            Id = new Guid("4dbb2ba0-3a95-4afb-9745-5140709e200b"),
                            ShortCode = "BA",
                            Title = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = new Guid("12abc1cd-835e-4c07-a488-c689b13366ab"),
                            ShortCode = "BE",
                            Title = "Belgium"
                        },
                        new
                        {
                            Id = new Guid("571172fd-fccf-4168-96fe-814fad1aaac9"),
                            ShortCode = "BG",
                            Title = "Bulgaria"
                        },
                        new
                        {
                            Id = new Guid("cadad9a0-fc50-412e-b79e-61d203071692"),
                            ShortCode = "HR",
                            Title = "Croatia"
                        },
                        new
                        {
                            Id = new Guid("d5204ced-bbac-4e5a-a532-1bc1b5962533"),
                            ShortCode = "CY",
                            Title = "Cyprus"
                        },
                        new
                        {
                            Id = new Guid("a6e8ef8d-c053-4dc7-9955-662e4ddd6c20"),
                            ShortCode = "CZ",
                            Title = "Czechia"
                        },
                        new
                        {
                            Id = new Guid("63cc9bfa-bf24-4e60-96c6-b299850dd24d"),
                            ShortCode = "DK",
                            Title = "Denmark"
                        },
                        new
                        {
                            Id = new Guid("8150b6a7-422a-4a76-9a74-d6ae04e20953"),
                            ShortCode = "EE",
                            Title = "Estonia"
                        },
                        new
                        {
                            Id = new Guid("12ac53bd-ba52-4d9e-8b41-2ac3d9736f49"),
                            ShortCode = "FI",
                            Title = "Finland"
                        },
                        new
                        {
                            Id = new Guid("ce453977-89b5-472f-a01f-811670e650a7"),
                            ShortCode = "FR",
                            Title = "France"
                        },
                        new
                        {
                            Id = new Guid("73a58f0c-3f56-4200-8e26-526066ce6705"),
                            ShortCode = "DE",
                            Title = "Germany"
                        },
                        new
                        {
                            Id = new Guid("54a68f6f-0cfa-42d9-b139-b4dd2ec39f7b"),
                            ShortCode = "EL",
                            Title = "Greece"
                        },
                        new
                        {
                            Id = new Guid("c8d7a8c8-4338-4ec2-99d8-85a7c1a6cd05"),
                            ShortCode = "HU",
                            Title = "Hungary"
                        },
                        new
                        {
                            Id = new Guid("d615bf72-b3dd-4337-9dd8-7ccefe19220e"),
                            ShortCode = "IS",
                            Title = "Iceland"
                        },
                        new
                        {
                            Id = new Guid("b46572ff-bdda-4b41-9e2b-ca797bbbe4a9"),
                            ShortCode = "IE",
                            Title = "Ireland"
                        },
                        new
                        {
                            Id = new Guid("b8381b2f-7b86-4821-89e7-200c037ac74d"),
                            ShortCode = "IT",
                            Title = "Italy"
                        },
                        new
                        {
                            Id = new Guid("32cdfaee-beca-4a99-a416-63239c286564"),
                            ShortCode = "LV",
                            Title = "Latvia"
                        },
                        new
                        {
                            Id = new Guid("bbd1fa17-c1c2-4d43-8867-6ca0797179dc"),
                            ShortCode = "LI",
                            Title = "Liechtenstein"
                        },
                        new
                        {
                            Id = new Guid("07d64cd4-d3c6-45c0-aeb3-3e30b9d80b89"),
                            ShortCode = "LT",
                            Title = "Lithuania"
                        },
                        new
                        {
                            Id = new Guid("1d65aef5-7d20-415f-a1a1-cfcf7287236f"),
                            ShortCode = "LU",
                            Title = "Luxembourg"
                        },
                        new
                        {
                            Id = new Guid("86d932f4-8de1-4243-b4c3-3624f431250e"),
                            ShortCode = "MT",
                            Title = "Malta"
                        },
                        new
                        {
                            Id = new Guid("70e02011-2a4f-4fad-8a09-ce6c177490cc"),
                            ShortCode = "NL",
                            Title = "Netherlands"
                        },
                        new
                        {
                            Id = new Guid("3b0a4c68-786d-4e4c-baec-00c7203181a3"),
                            ShortCode = "MK",
                            Title = "North Macedonia"
                        },
                        new
                        {
                            Id = new Guid("2c889f36-df25-42a2-b372-4c166685f73a"),
                            ShortCode = "NO",
                            Title = "Norway"
                        },
                        new
                        {
                            Id = new Guid("4c664637-f069-4a1d-90dd-5f654abbde9a"),
                            ShortCode = "PL",
                            Title = "Poland"
                        },
                        new
                        {
                            Id = new Guid("d0ebc426-7693-41df-870d-815a9b1a971a"),
                            ShortCode = "PT",
                            Title = "Portugal"
                        },
                        new
                        {
                            Id = new Guid("b182a2e9-3530-4307-91b6-744fbd318082"),
                            ShortCode = "RO",
                            Title = "Romania"
                        },
                        new
                        {
                            Id = new Guid("955f28fa-7c0c-48c1-8989-b9300674657d"),
                            ShortCode = "RS",
                            Title = "Serbia"
                        },
                        new
                        {
                            Id = new Guid("ac1b58b7-87e1-441a-9e90-239d96863bd1"),
                            ShortCode = "SK",
                            Title = "Slovakia"
                        },
                        new
                        {
                            Id = new Guid("e41e3733-12b7-4c7d-8410-445adc6d9098"),
                            ShortCode = "SI",
                            Title = "Slovenia"
                        },
                        new
                        {
                            Id = new Guid("1c718060-b53c-4c1c-9c8c-ebbafdb029c2"),
                            ShortCode = "ES",
                            Title = "Spain"
                        },
                        new
                        {
                            Id = new Guid("8c9b1c1d-1b56-4785-a686-320d562630b8"),
                            ShortCode = "SE",
                            Title = "Sweden"
                        },
                        new
                        {
                            Id = new Guid("9f7b1041-f4d1-4aff-b224-0c21e93f9f6a"),
                            ShortCode = "CH",
                            Title = "Switzerland"
                        },
                        new
                        {
                            Id = new Guid("1396b101-6827-4ed9-b883-9dd590694ecf"),
                            ShortCode = "TR",
                            Title = "Turkey"
                        },
                        new
                        {
                            Id = new Guid("54d974d2-381b-44b2-b34d-e9caba2a1962"),
                            ShortCode = "UK",
                            Title = "United Kingdom"
                        });
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.Industry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.Plan_Attribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttrVal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BusinessPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Kind")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TexterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPlanId");

                    b.HasIndex("TexterId");

                    b.ToTable("Plan_Attributes");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.SharedPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPlanId");

                    b.ToTable("SharedPlans");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.Texter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Kind")
                        .HasColumnType("smallint");

                    b.Property<string>("LongValue")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Texters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("410d5f0f-9679-4064-a2ea-80f3d69f9d3d"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Land"
                        },
                        new
                        {
                            Id = new Guid("e0346e28-6417-4fbe-b479-e22111153a1e"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Facilities and equipment"
                        },
                        new
                        {
                            Id = new Guid("27517f6b-0474-40b0-8a07-b50c42132eec"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Vehicles"
                        },
                        new
                        {
                            Id = new Guid("69b6fad1-61d6-44c4-a423-a0c91611f3f7"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Inventory"
                        },
                        new
                        {
                            Id = new Guid("2e985927-47cd-402b-9cc7-22f3b4138340"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Skills and experience of employees"
                        },
                        new
                        {
                            Id = new Guid("62e67457-1921-4b3c-afa8-8a976dcde431"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Corporate image"
                        },
                        new
                        {
                            Id = new Guid("f8e35a00-c4c2-46bd-bf54-5a63861762b7"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Patents"
                        },
                        new
                        {
                            Id = new Guid("3b5b79aa-8075-4193-93cd-6ab9d4bf682a"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Trademarks"
                        },
                        new
                        {
                            Id = new Guid("9f9ae6ea-7a59-43ff-86ce-a753e9c29239"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Copyrights"
                        },
                        new
                        {
                            Id = new Guid("43dc8c7a-d0f3-4245-a155-4f80671a9d03"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Operational processes"
                        },
                        new
                        {
                            Id = new Guid("e63a9d37-9fd4-402c-bea5-431a29d49c73"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Management processes"
                        },
                        new
                        {
                            Id = new Guid("7d36d6e5-6faf-4d60-8d9d-c0691b125148"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Supporting processes"
                        },
                        new
                        {
                            Id = new Guid("e5b4836f-6cd5-48ec-8cd8-01386ea7f688"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Product design"
                        },
                        new
                        {
                            Id = new Guid("c72826b0-4172-4e06-a38e-d2b59f88c15a"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Product assortment"
                        },
                        new
                        {
                            Id = new Guid("31cd9f21-f896-4586-8e23-b15234b10b70"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Packaging and labeling"
                        },
                        new
                        {
                            Id = new Guid("1ea58faf-b19f-4d89-a6ad-7a1d18255d0a"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Complementary and after-sales service"
                        },
                        new
                        {
                            Id = new Guid("25ad8263-0a00-4ce0-bcca-c53d01bef5ac"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Guarantees and warranties"
                        },
                        new
                        {
                            Id = new Guid("7a60b230-fb12-470d-9862-06b5d063fb52"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Return of goods"
                        },
                        new
                        {
                            Id = new Guid("73708fda-9214-462c-a5e2-0513468e0a3f"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Price"
                        },
                        new
                        {
                            Id = new Guid("a7aa12df-58e3-4c3f-99f0-a5559cf8e3e4"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Discounts"
                        },
                        new
                        {
                            Id = new Guid("3d0aa589-cac3-4724-bb9e-513824a9d168"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Payment terms"
                        },
                        new
                        {
                            Id = new Guid("e3c41943-b31b-43f6-a4af-7781dcf8fe76"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Customer convenient access to products"
                        },
                        new
                        {
                            Id = new Guid("929d6081-4dfa-430b-8547-101d8c3c7ddd"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Advertising, PR and sales promotion"
                        },
                        new
                        {
                            Id = new Guid("6f9052f2-8bff-4fa9-ab67-e7d6277833ea"),
                            Kind = (short)3,
                            LongValue = "a",
                            Value = "Arrival of new technology"
                        },
                        new
                        {
                            Id = new Guid("0b8a66f2-80b6-4d3a-9e9c-1c90f747aa2a"),
                            Kind = (short)3,
                            LongValue = "a",
                            Value = "New regulations"
                        },
                        new
                        {
                            Id = new Guid("098285e4-cb38-4d97-a62b-f3bc10edb257"),
                            Kind = (short)3,
                            LongValue = "a",
                            Value = "Unfulfilled customer need"
                        },
                        new
                        {
                            Id = new Guid("1a11fb78-89ee-44d3-8bb5-c36f5ed1e786"),
                            Kind = (short)3,
                            LongValue = "a",
                            Value = "Taking business courses (training)"
                        },
                        new
                        {
                            Id = new Guid("84a1e935-6759-44fb-9853-9215847cd8d2"),
                            Kind = (short)3,
                            LongValue = "a",
                            Value = "Trend changes"
                        },
                        new
                        {
                            Id = new Guid("c1c692f2-05a7-4550-b511-210f718cbd74"),
                            Kind = (short)3,
                            LongValue = "a",
                            Value = "New substitute products"
                        });
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailConfirmationString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Facebook")
                        .HasColumnType("bit");

                    b.Property<bool>("Google")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReceiveEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceiveNotification")
                        .HasColumnType("bit");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorAuthEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("TwoFactorString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TwoFactorStringExpiration")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("UserPhoto")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.UserFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserFiles");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Administrator"
                        },
                        new
                        {
                            Id = 100,
                            Title = "Simple"
                        });
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.Activity", b =>
                {
                    b.HasOne("KabadaAPI.DataSource.Models.Industry", "Industry")
                        .WithMany("Activities")
                        .HasForeignKey("IndustryId");

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.BusinessPlan", b =>
                {
                    b.HasOne("KabadaAPI.DataSource.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.HasOne("KabadaAPI.DataSource.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("KabadaAPI.DataSource.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Activity");

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.Plan_Attribute", b =>
                {
                    b.HasOne("KabadaAPI.DataSource.Models.BusinessPlan", "BusinessPlan")
                        .WithMany()
                        .HasForeignKey("BusinessPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KabadaAPI.DataSource.Models.Texter", "Texter")
                        .WithMany()
                        .HasForeignKey("TexterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessPlan");

                    b.Navigation("Texter");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.RefreshToken", b =>
                {
                    b.HasOne("KabadaAPI.DataSource.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.SharedPlan", b =>
                {
                    b.HasOne("KabadaAPI.DataSource.Models.BusinessPlan", "BusinessPlan")
                        .WithMany()
                        .HasForeignKey("BusinessPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessPlan");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.User", b =>
                {
                    b.HasOne("KabadaAPI.DataSource.Models.UserType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.Industry", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
