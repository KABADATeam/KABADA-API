// <auto-generated />
using System;
using KabadaAPI.DataSource;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KabadaAPI.DataSource.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20210608103345_SWOTvaluesAdded")]
    partial class SWOTvaluesAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KabadaAPI.DataSource.Models.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IndustryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.BusinessPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Completed")
                        .HasColumnType("int");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid?>("Img")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsSwotCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Public")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("BusinessPlans");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67fe454c-8f3c-41fa-a42a-cb907712f937"),
                            ShortCode = "AT",
                            Title = "Austria"
                        },
                        new
                        {
                            Id = new Guid("31ec1fec-4257-465c-a666-d6990f8229ca"),
                            ShortCode = "BA",
                            Title = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = new Guid("58f9eaeb-50d7-4d0b-81e6-0953dc372c2a"),
                            ShortCode = "BE",
                            Title = "Belgium"
                        },
                        new
                        {
                            Id = new Guid("e14f38d0-a14f-4e9f-9e8c-89962e87c716"),
                            ShortCode = "BG",
                            Title = "Bulgaria"
                        },
                        new
                        {
                            Id = new Guid("6a2ef845-cf8a-4679-9546-bfe3e593f8ec"),
                            ShortCode = "HR",
                            Title = "Croatia"
                        },
                        new
                        {
                            Id = new Guid("aa399e5f-90c1-410b-a032-2238d364d422"),
                            ShortCode = "CY",
                            Title = "Cyprus"
                        },
                        new
                        {
                            Id = new Guid("50ebf9cb-a63a-4985-9d60-5225644f24c7"),
                            ShortCode = "CZ",
                            Title = "Czechia"
                        },
                        new
                        {
                            Id = new Guid("53d32033-04b6-4e5f-bace-b88bcabea48b"),
                            ShortCode = "DK",
                            Title = "Denmark"
                        },
                        new
                        {
                            Id = new Guid("fdee2edf-a0f1-4874-98b4-b3fcd2ef7a57"),
                            ShortCode = "EE",
                            Title = "Estonia"
                        },
                        new
                        {
                            Id = new Guid("e8d173e3-adc7-4ed4-9596-1531e1c50234"),
                            ShortCode = "FI",
                            Title = "Finland"
                        },
                        new
                        {
                            Id = new Guid("40b01d3b-80ce-4ba5-95ce-795dcf248c99"),
                            ShortCode = "FR",
                            Title = "France"
                        },
                        new
                        {
                            Id = new Guid("ba0faef1-722f-4304-b3fb-7ab623a1bd5a"),
                            ShortCode = "DE",
                            Title = "Germany"
                        },
                        new
                        {
                            Id = new Guid("c52cf1c0-47e6-4af8-9b81-8441f6ba5ec0"),
                            ShortCode = "EL",
                            Title = "Greece"
                        },
                        new
                        {
                            Id = new Guid("c20b38cf-75a6-4178-86c1-9aaf19abe6d2"),
                            ShortCode = "HU",
                            Title = "Hungary"
                        },
                        new
                        {
                            Id = new Guid("4d079e20-5c96-4134-91ff-8acd54f569ce"),
                            ShortCode = "IS",
                            Title = "Iceland"
                        },
                        new
                        {
                            Id = new Guid("e1a89620-6c4d-4c3f-8a81-751819aa433d"),
                            ShortCode = "IE",
                            Title = "Ireland"
                        },
                        new
                        {
                            Id = new Guid("cfc6cd1a-f78e-47a3-8a0a-739e44f7e618"),
                            ShortCode = "IT",
                            Title = "Italy"
                        },
                        new
                        {
                            Id = new Guid("3e40e379-0bd5-47f7-9b88-48c7e6fa3194"),
                            ShortCode = "LV",
                            Title = "Latvia"
                        },
                        new
                        {
                            Id = new Guid("90192548-c837-4ffc-8ff6-b03a98419d9a"),
                            ShortCode = "LI",
                            Title = "Liechtenstein"
                        },
                        new
                        {
                            Id = new Guid("ad30cc1e-87b4-4ac4-832d-12019d0546b7"),
                            ShortCode = "LT",
                            Title = "Lithuania"
                        },
                        new
                        {
                            Id = new Guid("2f426bfa-7265-4d96-bdba-a4e8a04470f9"),
                            ShortCode = "LU",
                            Title = "Luxembourg"
                        },
                        new
                        {
                            Id = new Guid("53607f28-e210-46e4-a6cc-8467066c00f5"),
                            ShortCode = "MT",
                            Title = "Malta"
                        },
                        new
                        {
                            Id = new Guid("2728c5cd-aa67-4cb1-b919-0f8173405427"),
                            ShortCode = "NL",
                            Title = "Netherlands"
                        },
                        new
                        {
                            Id = new Guid("0ef25b01-143d-4535-b572-87bb749809f2"),
                            ShortCode = "MK",
                            Title = "North Macedonia"
                        },
                        new
                        {
                            Id = new Guid("3c057780-9052-4ba8-a8aa-158e13cb2297"),
                            ShortCode = "NO",
                            Title = "Norway"
                        },
                        new
                        {
                            Id = new Guid("d064723f-f2a1-4933-8ee7-8e62789fe5a0"),
                            ShortCode = "PL",
                            Title = "Poland"
                        },
                        new
                        {
                            Id = new Guid("47893b31-16ef-4b04-bca7-ec87c0bccff5"),
                            ShortCode = "PT",
                            Title = "Portugal"
                        },
                        new
                        {
                            Id = new Guid("ab8120d0-d607-4a9a-b848-dab0031cbab6"),
                            ShortCode = "RO",
                            Title = "Romania"
                        },
                        new
                        {
                            Id = new Guid("f5cd23f0-3424-497d-a780-5808572aaf69"),
                            ShortCode = "RS",
                            Title = "Serbia"
                        },
                        new
                        {
                            Id = new Guid("92ce0ece-cbb1-4fea-8820-ca8317c061cb"),
                            ShortCode = "SK",
                            Title = "Slovakia"
                        },
                        new
                        {
                            Id = new Guid("1818113b-1865-424d-adc3-147263e6d476"),
                            ShortCode = "SI",
                            Title = "Slovenia"
                        },
                        new
                        {
                            Id = new Guid("23b99074-7d01-4b1c-96d2-71d1b5427820"),
                            ShortCode = "ES",
                            Title = "Spain"
                        },
                        new
                        {
                            Id = new Guid("b8c83404-304b-434a-82de-11a4b26e87fc"),
                            ShortCode = "SE",
                            Title = "Sweden"
                        },
                        new
                        {
                            Id = new Guid("b458b9d2-8d26-435c-abfa-a9f06293cc85"),
                            ShortCode = "CH",
                            Title = "Switzerland"
                        },
                        new
                        {
                            Id = new Guid("60f4c95b-3231-4210-a014-76cc5f2a39fb"),
                            ShortCode = "TR",
                            Title = "Turkey"
                        },
                        new
                        {
                            Id = new Guid("e3c7bba7-fb16-4538-91b3-e9d6cdedf3e0"),
                            ShortCode = "UK",
                            Title = "United Kingdom"
                        });
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.Industry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.Plan_SWOT", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Kind")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TexterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPlanId");

                    b.HasIndex("TexterId");

                    b.ToTable("Plan_SWOTs");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.SharedPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("SharedPlans");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.Texter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Kind")
                        .HasColumnType("smallint");

                    b.Property<string>("LongValue")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Texters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("542d2486-3b15-43c8-8b28-8872e805d0fb"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Land"
                        },
                        new
                        {
                            Id = new Guid("1ac5124e-a5f9-4184-a830-6740843e1d2e"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Facilities and equipment"
                        },
                        new
                        {
                            Id = new Guid("2e92794a-1b4f-4e37-aee0-591e5646148f"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Vehicles"
                        },
                        new
                        {
                            Id = new Guid("fc4783c0-a4cd-419c-b54a-233270a3deb6"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Inventory"
                        },
                        new
                        {
                            Id = new Guid("8d12ead0-c6f8-48b9-8f60-2f527f7684ab"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Skills and experience of employees"
                        },
                        new
                        {
                            Id = new Guid("9f399477-a374-48ef-8574-4522c313734d"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Corporate image"
                        },
                        new
                        {
                            Id = new Guid("62abf64e-3d2d-4e43-b795-55579955bd7b"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Patents"
                        },
                        new
                        {
                            Id = new Guid("cc93e7e7-35c2-4521-8fdb-5de537cba47c"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Trademarks"
                        },
                        new
                        {
                            Id = new Guid("889a6bbb-4f36-4b9e-b5db-a6500976502e"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Copyrights"
                        },
                        new
                        {
                            Id = new Guid("45b5d2ac-1ff9-494c-b62f-5cc91bd956c1"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Operational processes"
                        },
                        new
                        {
                            Id = new Guid("1e31de01-f51b-4cfd-8d73-fe42f94429e5"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Management processes"
                        },
                        new
                        {
                            Id = new Guid("53936dfb-bbfe-4281-9fff-ce5f8e6661b1"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Supporting processes"
                        },
                        new
                        {
                            Id = new Guid("de2a50f0-32a3-4f99-b6d1-99c79395aeb1"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Product design"
                        },
                        new
                        {
                            Id = new Guid("7f60413b-c732-4a3f-8812-3b9f860b7d14"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Product assortment"
                        },
                        new
                        {
                            Id = new Guid("3eabf66f-aa13-4a9e-8bfa-63f3b68032c1"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Packaging and labeling"
                        },
                        new
                        {
                            Id = new Guid("07e48285-c84c-4143-b295-949f06587241"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Complementary and after-sales service"
                        },
                        new
                        {
                            Id = new Guid("f2dee628-d359-473e-8286-5e95bad3c655"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Guarantees and warranties"
                        },
                        new
                        {
                            Id = new Guid("00397e14-79dc-4f9f-be31-f30aacaef60f"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Return of goods"
                        },
                        new
                        {
                            Id = new Guid("5fcc9f4d-dbaf-4ba7-9187-b548e799788c"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Price"
                        },
                        new
                        {
                            Id = new Guid("ee2cfd00-0c7e-48c5-9e15-f4368f0194ea"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Discounts"
                        },
                        new
                        {
                            Id = new Guid("62f7e9c9-5819-4f3a-b9ef-c1b853df917d"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Payment terms"
                        },
                        new
                        {
                            Id = new Guid("72be0b41-fbf4-452c-88ad-a51bdf578cb1"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Customer convenient access to products"
                        },
                        new
                        {
                            Id = new Guid("4819c005-1228-4a3d-aafa-aee626300e0b"),
                            Kind = (short)1,
                            LongValue = "a",
                            Value = "Advertising, PR and sales promotion"
                        },
                        new
                        {
                            Id = new Guid("e241f707-9094-4a43-893a-de5388f507fb"),
                            Kind = (short)3,
                            LongValue = "a",
                            Value = "Arrival of new technology"
                        },
                        new
                        {
                            Id = new Guid("7f299c46-93bc-4788-bd46-094823544175"),
                            Kind = (short)3,
                            LongValue = "a",
                            Value = "New regulations"
                        },
                        new
                        {
                            Id = new Guid("e349a7d6-8e31-4f10-9e47-6908821ec484"),
                            Kind = (short)3,
                            LongValue = "a",
                            Value = "Unfulfilled customer need"
                        },
                        new
                        {
                            Id = new Guid("de71b7cf-a051-4fbb-a600-cde79db82dd9"),
                            Kind = (short)3,
                            LongValue = "a",
                            Value = "Taking business courses (training)"
                        },
                        new
                        {
                            Id = new Guid("dabc4363-e459-4bf1-862b-1b2b5038b42c"),
                            Kind = (short)3,
                            LongValue = "a",
                            Value = "Trend changes"
                        },
                        new
                        {
                            Id = new Guid("a68d476b-8a22-405f-9852-5ab85a95ffac"),
                            Kind = (short)3,
                            LongValue = "a",
                            Value = "New substitute products"
                        });
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailConfirmationString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Facebook")
                        .HasColumnType("bit");

                    b.Property<bool>("Google")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReceiveEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceiveNotification")
                        .HasColumnType("bit");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorAuthEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("TwoFactorString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TwoFactorStringExpiration")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("UserPhoto")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.UserFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserFiles");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Administrator"
                        },
                        new
                        {
                            Id = 100,
                            Title = "Simple"
                        });
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.Activity", b =>
                {
                    b.HasOne("KabadaAPI.DataSource.Models.Industry", "Industry")
                        .WithMany("Activities")
                        .HasForeignKey("IndustryId");

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.BusinessPlan", b =>
                {
                    b.HasOne("KabadaAPI.DataSource.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.HasOne("KabadaAPI.DataSource.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("KabadaAPI.DataSource.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Activity");

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.Plan_SWOT", b =>
                {
                    b.HasOne("KabadaAPI.DataSource.Models.BusinessPlan", "BusinessPlan")
                        .WithMany()
                        .HasForeignKey("BusinessPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KabadaAPI.DataSource.Models.Texter", "Texter")
                        .WithMany()
                        .HasForeignKey("TexterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessPlan");

                    b.Navigation("Texter");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.RefreshToken", b =>
                {
                    b.HasOne("KabadaAPI.DataSource.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.User", b =>
                {
                    b.HasOne("KabadaAPI.DataSource.Models.UserType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("KabadaAPI.DataSource.Models.Industry", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
